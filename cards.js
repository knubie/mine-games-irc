// Generated by CoffeeScript 1.4.0
(function() {
  var Armor, Card, Gem, Item, Monster, Weapon, cards, key, value,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Card = (function() {

    function Card(options) {
      this.name = options.name || 'No name';
      this.cost = 0;
      this.value = 0;
      this.actions = [];
      this.attack = 0;
      this.defense = 0;
      this.mine = 0;
      this.level = 0;
      this.description = "";
      this.action = function() {
        return msg("That card has no action.");
      };
      this.init(options);
    }

    return Card;

  })();

  Gem = (function(_super) {

    __extends(Gem, _super);

    function Gem() {
      return Gem.__super__.constructor.apply(this, arguments);
    }

    Gem.prototype.init = function(options) {
      this.type = 'gem';
      this.value = options.value;
      return this.description = "Used at the shop to buy more cards.";
    };

    return Gem;

  })(Card);

  Weapon = (function(_super) {

    __extends(Weapon, _super);

    function Weapon() {
      return Weapon.__super__.constructor.apply(this, arguments);
    }

    Weapon.prototype.init = function(options) {
      this.type = 'weapon';
      this.attack = options.attack;
      this.cost = options.cost;
      return this.description = "Can be used to attack Monsters or other Players.";
    };

    return Weapon;

  })(Card);

  Armor = (function(_super) {

    __extends(Armor, _super);

    function Armor() {
      return Armor.__super__.constructor.apply(this, arguments);
    }

    Armor.prototype.init = function(options) {
      this.type = 'armor';
      this.defense = options.defense;
      this.cost = options.cost;
      return this.description = "Used to defend against attacks.";
    };

    return Armor;

  })(Card);

  Item = (function(_super) {

    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.init = function(options) {
      this.type = 'item';
      this.cost = options.cost;
      return this.mine = options.mine;
    };

    return Item;

  })(Card);

  Monster = (function(_super) {

    __extends(Monster, _super);

    function Monster() {
      return Monster.__super__.constructor.apply(this, arguments);
    }

    Monster.prototype.init = function(options) {
      this.type = 'monster';
      this.level = options.level;
      this.hp = options.hp;
      return this.attack = options.attack;
    };

    return Monster;

  })(Card);

  cards = {
    silver: new Gem({
      name: 'Silver',
      value: 1
    }),
    emerald: new Gem({
      name: 'Emerald',
      value: 2
    }),
    gold: new Gem({
      name: 'Gold',
      value: 3
    }),
    ruby: new Gem({
      name: 'Ruby',
      value: 4
    }),
    diamond: new Gem({
      name: 'Diamond',
      value: 5
    }),
    dagger: new Weapon({
      name: 'Dagger',
      attack: 3,
      cost: 3
    }),
    stone_pick: new Item({
      name: 'Stone Pickaxe',
      cost: 3,
      mine: 1,
      action: function(nick) {
        return mine_card(nick);
      }
    }),
    goblin: new Monster({
      name: 'Goblin',
      level: 1,
      hp: 6,
      attack: 3,
      description: "Cretins with big ears and fangs. Strong and stupid."
    })
  };

  for (key in cards) {
    value = cards[key];
    exports[key] = value;
  }

}).call(this);
